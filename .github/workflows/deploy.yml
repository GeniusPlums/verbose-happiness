name: Deploy to Digital Ocean
on:
  workflow_call:
    inputs:
      image-repository:
        description: Docker image to deploy
        default: geniusplums/laudspeaker
        required: false
        type: string
      image-tag:
        description: Tag of docker image to deploy
        required: true
        type: string
      env:
        description: Environment to deploy docker. Either prod or staging
        required: true
        type: string
    secrets:
      DIGITALOCEAN_ACCESS_TOKEN:
        required: true
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true

jobs:
  deploy:
    name: Deploy to Digital Ocean
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Create app specification
        run: |
          cat > app.yaml << EOF
          name: laudspeaker-${{ inputs.env }}
          services:
            - name: laudspeaker-service
              image:
                registry_type: DOCKER_HUB
                registry: registry.hub.docker.com
                repository: ${{ inputs.image-repository }}
                tag: ${{ inputs.image-tag }}
                registry_credentials:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}
              instance_count: 1
              instance_size_slug: basic-xxs
              http_port: 8080
              routes:
                - path: /
              envs:
                - key: NODE_ENV
                  value: ${{ inputs.env }}
          EOF

      - name: Deploy to Digital Ocean
        run: |
          if doctl apps list --format ID,Spec.Name --no-header | grep -q "laudspeaker-${{ inputs.env }}"; then
            APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "laudspeaker-${{ inputs.env }}" | awk '{print $1}')
            doctl apps update $APP_ID --spec app.yaml
          else
            doctl apps create --spec app.yaml
          fi
